// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tunnels.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1 "github.com/ranxx/proxy/proto/msg/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Match struct {
	// 前缀
	MachinePrefix string `protobuf:"bytes,1,opt,name=machine_prefix,json=machinePrefix,proto3" json:"machine_prefix,omitempty"`
	// 具体的机器地址
	Mechines []string `protobuf:"bytes,2,rep,name=mechines,proto3" json:"mechines,omitempty"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{0}
}
func (m *Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(m, src)
}
func (m *Match) XXX_Size() int {
	return m.Size()
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetMachinePrefix() string {
	if m != nil {
		return m.MachinePrefix
	}
	return ""
}

func (m *Match) GetMechines() []string {
	if m != nil {
		return m.Mechines
	}
	return nil
}

type Tunneler struct {
	// 类型
	Network v1.NetworkType `protobuf:"varint,1,opt,name=network,proto3,enum=v1.NetworkType" json:"network,omitempty"`
	// 本地外网地址
	Laddr *v1.Addr `protobuf:"bytes,2,opt,name=laddr,proto3" json:"laddr,omitempty"`
	// 需要 代理的地址
	Raddr *v1.Addr `protobuf:"bytes,3,opt,name=raddr,proto3" json:"raddr,omitempty"`
	// 匹配规则
	Match *Match `protobuf:"bytes,4,opt,name=match,proto3" json:"match,omitempty"`
}

func (m *Tunneler) Reset()         { *m = Tunneler{} }
func (m *Tunneler) String() string { return proto.CompactTextString(m) }
func (*Tunneler) ProtoMessage()    {}
func (*Tunneler) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{1}
}
func (m *Tunneler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tunneler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tunneler.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tunneler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunneler.Merge(m, src)
}
func (m *Tunneler) XXX_Size() int {
	return m.Size()
}
func (m *Tunneler) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunneler.DiscardUnknown(m)
}

var xxx_messageInfo_Tunneler proto.InternalMessageInfo

func (m *Tunneler) GetNetwork() v1.NetworkType {
	if m != nil {
		return m.Network
	}
	return v1.NetworkType_HTTP
}

func (m *Tunneler) GetLaddr() *v1.Addr {
	if m != nil {
		return m.Laddr
	}
	return nil
}

func (m *Tunneler) GetRaddr() *v1.Addr {
	if m != nil {
		return m.Raddr
	}
	return nil
}

func (m *Tunneler) GetMatch() *Match {
	if m != nil {
		return m.Match
	}
	return nil
}

type ListTunnelReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListTunnelReq) Reset()         { *m = ListTunnelReq{} }
func (m *ListTunnelReq) String() string { return proto.CompactTextString(m) }
func (*ListTunnelReq) ProtoMessage()    {}
func (*ListTunnelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{2}
}
func (m *ListTunnelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTunnelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTunnelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTunnelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTunnelReq.Merge(m, src)
}
func (m *ListTunnelReq) XXX_Size() int {
	return m.Size()
}
func (m *ListTunnelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTunnelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListTunnelReq proto.InternalMessageInfo

func (m *ListTunnelReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTunnelReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTunnelRsp struct {
	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Tunneler `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ListTunnelRsp) Reset()         { *m = ListTunnelRsp{} }
func (m *ListTunnelRsp) String() string { return proto.CompactTextString(m) }
func (*ListTunnelRsp) ProtoMessage()    {}
func (*ListTunnelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{3}
}
func (m *ListTunnelRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTunnelRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTunnelRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTunnelRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTunnelRsp.Merge(m, src)
}
func (m *ListTunnelRsp) XXX_Size() int {
	return m.Size()
}
func (m *ListTunnelRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTunnelRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ListTunnelRsp proto.InternalMessageInfo

func (m *ListTunnelRsp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListTunnelRsp) GetItems() []*Tunneler {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddTunnelReq struct {
	Transfers []*Tunneler `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *AddTunnelReq) Reset()         { *m = AddTunnelReq{} }
func (m *AddTunnelReq) String() string { return proto.CompactTextString(m) }
func (*AddTunnelReq) ProtoMessage()    {}
func (*AddTunnelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{4}
}
func (m *AddTunnelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTunnelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTunnelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTunnelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTunnelReq.Merge(m, src)
}
func (m *AddTunnelReq) XXX_Size() int {
	return m.Size()
}
func (m *AddTunnelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTunnelReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddTunnelReq proto.InternalMessageInfo

func (m *AddTunnelReq) GetTransfers() []*Tunneler {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type AddTunnelRsp struct {
}

func (m *AddTunnelRsp) Reset()         { *m = AddTunnelRsp{} }
func (m *AddTunnelRsp) String() string { return proto.CompactTextString(m) }
func (*AddTunnelRsp) ProtoMessage()    {}
func (*AddTunnelRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e824344ab8351d, []int{5}
}
func (m *AddTunnelRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTunnelRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTunnelRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTunnelRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTunnelRsp.Merge(m, src)
}
func (m *AddTunnelRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddTunnelRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTunnelRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddTunnelRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Match)(nil), "v1.Match")
	proto.RegisterType((*Tunneler)(nil), "v1.Tunneler")
	proto.RegisterType((*ListTunnelReq)(nil), "v1.ListTunnelReq")
	proto.RegisterType((*ListTunnelRsp)(nil), "v1.ListTunnelRsp")
	proto.RegisterType((*AddTunnelReq)(nil), "v1.AddTunnelReq")
	proto.RegisterType((*AddTunnelRsp)(nil), "v1.AddTunnelRsp")
}

func init() { proto.RegisterFile("tunnels.proto", fileDescriptor_41e824344ab8351d) }

var fileDescriptor_41e824344ab8351d = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xee, 0x26, 0xbf, 0x6d, 0x92, 0x69, 0x9a, 0xf6, 0x37, 0x14, 0x09, 0xa1, 0xae, 0x65, 0x44,
	0xac, 0x85, 0xee, 0x34, 0xeb, 0xad, 0x20, 0x18, 0x6f, 0x4a, 0x15, 0x59, 0x7a, 0xf2, 0x22, 0xd3,
	0x64, 0x92, 0x8e, 0xee, 0xce, 0x8c, 0x33, 0xd3, 0x35, 0xbd, 0x7a, 0x10, 0xf1, 0x54, 0x2a, 0xe8,
	0x55, 0xf1, 0x22, 0x82, 0x67, 0x0f, 0xfd, 0x02, 0x1e, 0x0b, 0x5e, 0x3c, 0x4a, 0xff, 0xa8, 0x1f,
	0x43, 0x76, 0x66, 0xdb, 0xb4, 0xb1, 0xa7, 0xe5, 0x79, 0x9e, 0xf7, 0x7d, 0xe6, 0x79, 0xdf, 0x9d,
	0x01, 0xd3, 0x66, 0x8b, 0x73, 0x9a, 0xe8, 0x50, 0x2a, 0x61, 0x04, 0x2c, 0x65, 0xed, 0xd6, 0xfc,
	0x40, 0x88, 0x41, 0x42, 0x31, 0x91, 0x0c, 0x13, 0xce, 0x85, 0x21, 0x86, 0x09, 0x5e, 0x54, 0xb4,
	0xdc, 0xa7, 0xbb, 0x3c, 0xa0, 0x7c, 0x59, 0x48, 0xca, 0x89, 0x64, 0x59, 0x84, 0x85, 0xb4, 0x35,
	0x17, 0xd4, 0xcf, 0x4b, 0x25, 0x86, 0xdb, 0xd8, 0x02, 0x9c, 0xea, 0x01, 0xce, 0xda, 0xf9, 0xc7,
	0xa9, 0xe8, 0x1e, 0xf0, 0xef, 0x13, 0xd3, 0xdd, 0x84, 0xd7, 0x40, 0x23, 0x25, 0xdd, 0x4d, 0xc6,
	0xe9, 0x63, 0xa9, 0x68, 0x9f, 0x0d, 0x9b, 0xde, 0x82, 0xb7, 0x58, 0x8b, 0xa7, 0x0b, 0xf6, 0xa1,
	0x25, 0x61, 0x0b, 0x54, 0x53, 0x6a, 0x09, 0xdd, 0x2c, 0x2d, 0x94, 0x17, 0x6b, 0xf1, 0x29, 0x46,
	0x6f, 0x3d, 0x50, 0x5d, 0xb7, 0xd3, 0x50, 0x05, 0x6f, 0x80, 0x0a, 0xa7, 0xe6, 0xb9, 0x50, 0x4f,
	0xad, 0x51, 0x23, 0x9a, 0x09, 0xb3, 0x76, 0xf8, 0xc0, 0x51, 0xeb, 0xdb, 0x92, 0xc6, 0x27, 0x3a,
	0x0c, 0x80, 0x9f, 0x90, 0x5e, 0x4f, 0x35, 0x4b, 0x0b, 0xde, 0xe2, 0x54, 0x54, 0xcd, 0x0b, 0x3b,
	0xbd, 0x9e, 0x8a, 0x1d, 0x9d, 0xeb, 0xca, 0xea, 0xe5, 0x71, 0xdd, 0xd2, 0xf0, 0x0a, 0xf0, 0xd3,
	0x7c, 0x86, 0xe6, 0x7f, 0x56, 0xaf, 0xe5, 0xba, 0x1d, 0x2a, 0x76, 0x3c, 0xba, 0x05, 0xa6, 0xd7,
	0x98, 0x36, 0x2e, 0x5b, 0x4c, 0x9f, 0xc1, 0x4b, 0x60, 0x52, 0xf4, 0xfb, 0x9a, 0x1a, 0x9b, 0xad,
	0x1c, 0x17, 0x08, 0xce, 0x01, 0x3f, 0x61, 0x29, 0x33, 0x36, 0x49, 0x39, 0x76, 0x00, 0xdd, 0x3d,
	0xd7, 0xae, 0x65, 0x5e, 0x66, 0x84, 0x21, 0x49, 0xd1, 0xed, 0x00, 0x44, 0xc0, 0x67, 0x86, 0xa6,
	0x6e, 0x2f, 0x53, 0x51, 0x3d, 0x8f, 0x71, 0xb2, 0x8e, 0xd8, 0x49, 0x68, 0x15, 0xd4, 0x3b, 0xbd,
	0xde, 0x28, 0xc8, 0x12, 0xa8, 0x19, 0x45, 0xb8, 0xee, 0x53, 0xa5, 0x9b, 0xde, 0x05, 0x7d, 0x23,
	0x19, 0x35, 0xce, 0xf6, 0x6a, 0x19, 0x7d, 0xf1, 0x40, 0xc5, 0x21, 0x0d, 0xd7, 0x00, 0x18, 0x45,
	0x84, 0xff, 0xe7, 0x16, 0xe7, 0x26, 0x6e, 0x8d, 0x53, 0x5a, 0xa2, 0xe6, 0x6e, 0xa7, 0x0a, 0x26,
	0x8f, 0x5f, 0xbd, 0xfb, 0xf3, 0xe1, 0xd3, 0x8b, 0xef, 0x47, 0x6f, 0x4a, 0x15, 0xe8, 0xe3, 0x84,
	0x69, 0x03, 0xd7, 0x41, 0xed, 0xf4, 0x24, 0x38, 0x5b, 0xac, 0x7b, 0xe4, 0x35, 0xc6, 0x68, 0x89,
	0xae, 0xee, 0x76, 0x1a, 0xa0, 0xfe, 0xeb, 0xeb, 0xde, 0xf1, 0xeb, 0xf7, 0x47, 0x7b, 0x1f, 0x7f,
	0xef, 0xbc, 0xb4, 0x86, 0x75, 0x54, 0xc1, 0xee, 0x7a, 0xaf, 0x7a, 0x4b, 0x77, 0x3e, 0x7b, 0xbb,
	0x9d, 0x3e, 0xc4, 0xa7, 0xa1, 0xd1, 0xe5, 0xfc, 0xbf, 0xf2, 0xe1, 0xb0, 0x35, 0xa7, 0x08, 0x0f,
	0xb5, 0x21, 0xea, 0x76, 0x5f, 0x0c, 0x53, 0xc2, 0x92, 0xb0, 0x2b, 0xd2, 0xc8, 0x6f, 0x87, 0x2b,
	0xe1, 0x0a, 0x9a, 0xb1, 0xef, 0x20, 0x6b, 0x17, 0x4e, 0x3a, 0x9a, 0x25, 0x52, 0x26, 0xac, 0x6b,
	0x2f, 0x39, 0x7e, 0xa2, 0x05, 0x5f, 0xfd, 0x87, 0xf9, 0x76, 0x10, 0x78, 0xfb, 0x07, 0x81, 0xf7,
	0xf3, 0x20, 0xf0, 0x76, 0x0e, 0x83, 0x89, 0xfd, 0xc3, 0x60, 0xe2, 0xc7, 0x61, 0x30, 0xf1, 0xe8,
	0xfa, 0x80, 0x99, 0xcd, 0xad, 0x8d, 0xdc, 0x1f, 0xdb, 0xb3, 0xf1, 0xd9, 0xd7, 0x51, 0x9c, 0x80,
	0xb3, 0xf6, 0xc6, 0xa4, 0x65, 0x6e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x0d, 0xc6, 0x06,
	0x9f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TunnelsClient is the client API for Tunnels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelsClient interface {
	// 代理端口列表
	ListTunnel(ctx context.Context, in *ListTunnelReq, opts ...grpc.CallOption) (*ListTunnelRsp, error)
	// 新增代理端口
	AddTunnel(ctx context.Context, in *AddTunnelReq, opts ...grpc.CallOption) (*AddTunnelRsp, error)
}

type tunnelsClient struct {
	cc *grpc.ClientConn
}

func NewTunnelsClient(cc *grpc.ClientConn) TunnelsClient {
	return &tunnelsClient{cc}
}

func (c *tunnelsClient) ListTunnel(ctx context.Context, in *ListTunnelReq, opts ...grpc.CallOption) (*ListTunnelRsp, error) {
	out := new(ListTunnelRsp)
	err := c.cc.Invoke(ctx, "/v1.Tunnels/ListTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelsClient) AddTunnel(ctx context.Context, in *AddTunnelReq, opts ...grpc.CallOption) (*AddTunnelRsp, error) {
	out := new(AddTunnelRsp)
	err := c.cc.Invoke(ctx, "/v1.Tunnels/AddTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelsServer is the server API for Tunnels service.
type TunnelsServer interface {
	// 代理端口列表
	ListTunnel(context.Context, *ListTunnelReq) (*ListTunnelRsp, error)
	// 新增代理端口
	AddTunnel(context.Context, *AddTunnelReq) (*AddTunnelRsp, error)
}

// UnimplementedTunnelsServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelsServer struct {
}

func (*UnimplementedTunnelsServer) ListTunnel(ctx context.Context, req *ListTunnelReq) (*ListTunnelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnel not implemented")
}
func (*UnimplementedTunnelsServer) AddTunnel(ctx context.Context, req *AddTunnelReq) (*AddTunnelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTunnel not implemented")
}

func RegisterTunnelsServer(s *grpc.Server, srv TunnelsServer) {
	s.RegisterService(&_Tunnels_serviceDesc, srv)
}

func _Tunnels_ListTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelsServer).ListTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Tunnels/ListTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelsServer).ListTunnel(ctx, req.(*ListTunnelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnels_AddTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTunnelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelsServer).AddTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Tunnels/AddTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelsServer).AddTunnel(ctx, req.(*AddTunnelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tunnels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Tunnels",
	HandlerType: (*TunnelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTunnel",
			Handler:    _Tunnels_ListTunnel_Handler,
		},
		{
			MethodName: "AddTunnel",
			Handler:    _Tunnels_AddTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tunnels.proto",
}

func (m *Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MachinePrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(len(m.MachinePrefix)))
		i += copy(dAtA[i:], m.MachinePrefix)
	}
	if len(m.Mechines) > 0 {
		for _, s := range m.Mechines {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Tunneler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tunneler) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Network != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Network))
	}
	if m.Laddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Laddr.Size()))
		n1, err1 := m.Laddr.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Raddr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Raddr.Size()))
		n2, err2 := m.Raddr.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.Match != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Match.Size()))
		n3, err3 := m.Match.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *ListTunnelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTunnelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *ListTunnelRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTunnelRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTunnels(dAtA, i, uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTunnels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddTunnelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTunnelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for _, msg := range m.Transfers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTunnels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddTunnelRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTunnelRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTunnels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MachinePrefix)
	if l > 0 {
		n += 1 + l + sovTunnels(uint64(l))
	}
	if len(m.Mechines) > 0 {
		for _, s := range m.Mechines {
			l = len(s)
			n += 1 + l + sovTunnels(uint64(l))
		}
	}
	return n
}

func (m *Tunneler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != 0 {
		n += 1 + sovTunnels(uint64(m.Network))
	}
	if m.Laddr != nil {
		l = m.Laddr.Size()
		n += 1 + l + sovTunnels(uint64(l))
	}
	if m.Raddr != nil {
		l = m.Raddr.Size()
		n += 1 + l + sovTunnels(uint64(l))
	}
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovTunnels(uint64(l))
	}
	return n
}

func (m *ListTunnelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovTunnels(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovTunnels(uint64(m.Limit))
	}
	return n
}

func (m *ListTunnelRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovTunnels(uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTunnels(uint64(l))
		}
	}
	return n
}

func (m *AddTunnelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTunnels(uint64(l))
		}
	}
	return n
}

func (m *AddTunnelRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTunnels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTunnels(x uint64) (n int) {
	return sovTunnels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachinePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachinePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mechines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mechines = append(m.Mechines, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tunneler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tunneler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tunneler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= v1.NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Laddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Laddr == nil {
				m.Laddr = &v1.Addr{}
			}
			if err := m.Laddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raddr == nil {
				m.Raddr = &v1.Addr{}
			}
			if err := m.Raddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &Match{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTunnelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTunnelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTunnelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTunnelRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTunnelRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTunnelRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Tunneler{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTunnelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTunnelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTunnelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTunnels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Tunneler{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTunnelRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTunnelRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTunnelRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTunnels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTunnels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTunnels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTunnels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTunnels
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTunnels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTunnels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTunnels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTunnels
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTunnels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTunnels   = fmt.Errorf("proto: integer overflow")
)
